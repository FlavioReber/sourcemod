name: Build and release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            os_short: linux
            compiler_cc: clang
            compiler_cxx: clang++
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os_short }}-${{ matrix.compiler_cc }}
    env:
      SDKS: '["css","csgo"]'
      ARCH: x86_64
      DEPENDENCIES_FOLDER: dependencies
      DEPENDENCIES_ROOT: ${{ github.workspace }}/dependencies
      MYSQL_VERSION: '5.5'
      MMSOURCE_VERSION: '1.10'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          path: sourcemod

      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: hl2sdk-mysql-mmsource
        with:
          path: ${{ env.DEPENDENCIES_ROOT }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-mysql${{ env.MYSQL_VERSION }}-mmsource${{ env.MMSOURCE_VERSION }}-${{ join(fromJSON(env.SDKS), '') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-mysql${{ env.MYSQL_VERSION }}-mmsource${{ env.MMSOURCE_VERSION }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-mysql${{ env.MYSQL_VERSION }}-

      # Setup Python for AMBuild
      - uses: actions/setup-python@v2
        name: Setup Python 3.8
        with:
          python-version: 3.8
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        shell: bash
        run: |
          mkdir -p ${{ env.DEPENDENCIES_FOLDER }}
          cd ${{ env.DEPENDENCIES_FOLDER }}

          # Satisfy checkout-deps requirement for a "sourcemod" folder.
          mkdir -p sourcemod
          ../sourcemod/tools/checkout-deps.sh -s ${{ join(fromJSON(env.SDKS)) }}

      - name: Install Linux dependencies
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc-multilib g++-multilib libstdc++6 lib32stdc++6 \
            libc6-dev libc6-dev-i386 linux-libc-dev \
            linux-libc-dev:i386 lib32z1-dev ${{ matrix.compiler_cc }}

      - name: Select clang compiler
        if: startsWith(runner.os, 'Linux')
        run: |
          echo "CC=${{ matrix.compiler_cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.compiler_cxx }}" >> $GITHUB_ENV
          ${{ matrix.compiler_cc }} --version
          ${{ matrix.compiler_cxx }} --version

      - name: Build
        working-directory: sourcemod
        run: |
          mkdir build
          cd build
          python ../configure.py --enable-optimize --sdks=${{ join(fromJSON(env.SDKS)) }}
          ambuild
          cp -R package /tmp/build

      - name: Upload build archive
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: /tmp/build
          retention-days: 2

  release:
    name: Release
    if: github.ref_type == 'tag'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set env
        run: |
          SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          if [[ "${{ github.ref_type }}" == 'tag' ]]; then RELEASE_VERSION="${{ github.ref_name }}"; else RELEASE_VERSION="$SHORT_SHA"; fi
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: /tmp/build

      - name: Archive Assets
        run: |
          cd /tmp/build
          tar -czf sourcemod-${{ env.RELEASE_VERSION }}.tar.gz -T <(\ls -1)

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/build/sourcemod-${{ env.RELEASE_VERSION }}.tar.gz
          asset_name: sourcemod-${{ env.RELEASE_VERSION }}.tar.gz
          asset_content_type: application/gzip
